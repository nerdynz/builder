package actions

import (
)

func New{{.TableNameTitle}}(w http.ResponseWriter, req *http.Request, ctx *flow.Context, store *datastore.Datastore) {
	siteID := ctx.SiteID()
	{{.TableNameCamel}}Helper := models.{{.TableNameTitle}}Helper()
	{{.TableNameCamel}} := {{.TableNameCamel}}Helper.New(siteID)
	ctx.JSON(http.StatusOK, {{.TableNameCamel}})
}

func Create{{.TableNameTitle}}(w http.ResponseWriter, req *http.Request, ctx *flow.Context, store *datastore.Datastore) {
	siteID := ctx.SiteID()
	{{.TableNameCamel}}Helper := models.{{.TableNameTitle}}Helper()
	{{.TableNameCamel}}, err := {{.TableNameCamel}}Helper.FromRequest(siteID,ctx.Req)
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Failed to create {{.TableNameCamel}} record", nil)
		return
	}
	err = {{.TableNameCamel}}Helper.Save(siteID,{{.TableNameCamel}})
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Failed to create {{.TableNameCamel}} record", err)
		return
	}
	ctx.JSON(http.StatusOK, {{.TableNameCamel}})
}

func Retrieve{{.TableNameTitle}}(w http.ResponseWriter, req *http.Request, ctx *flow.Context, store *datastore.Datastore) {
	siteID := ctx.SiteID()
	if ctx.URLParam("{{.TableNameCamel}}ID") == "" {
		Retrieve{{.TableNamePluralTitle}}(w, req, ctx, store)
		return
	}

	//get the {{.TableNameCamel}}ID from the request
	{{.TableNameCamel}}ID := ctx.URLIntParamWithDefault("{{.TableNameCamel}}ID", -1)
	if {{.TableNameCamel}}ID == -1 {
		ctx.ErrorJSON(http.StatusInternalServerError, "Invalid {{.TableNameCamel}}ID", nil)
		return
	}

	{{.TableNameCamel}}Helper := models.{{.TableNameTitle}}Helper()
	{{.TableNameCamel}}, err := {{.TableNameCamel}}Helper.Load(siteID,{{.TableNameCamel}}ID)
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Failed to retrieve {{.TableNameTitle}} record", err)
		return
	}

	ctx.JSON(http.StatusOK, {{.TableNameCamel}})
}

func Retrieve{{.TableNamePluralTitle}}(w http.ResponseWriter, req *http.Request, ctx *flow.Context, store *datastore.Datastore) {
	siteID := ctx.SiteID()
	{{.TableNameCamel}}Helper := models.{{.TableNameTitle}}Helper()
	{{.TableNamePluralCamel}}, err := {{.TableNameCamel}}Helper.All(siteID)

	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Failed to retrieve {{.TableNameTitle}} records", err)
		return
	}

	ctx.JSON(http.StatusOK, {{.TableNamePluralCamel}})
}

func Paged{{.TableNamePluralTitle}}(w http.ResponseWriter, req *http.Request, ctx *flow.Context, store *datastore.Datastore) {
	siteID := ctx.SiteID()
	{{.TableNameCamel}}Helper := models.{{.TableNameTitle}}Helper()
	pageNum := ctx.URLIntParamWithDefault("pagenum", 1)
	limit := ctx.URLIntParamWithDefault("limit", 10)
	sort := ctx.URLParam("sort")
	direction := ctx.URLParam("direction")

	data, err := {{.TableNameCamel}}Helper.PagedBy(siteID, pageNum, limit, sort, direction)
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Unabled to get paged {{.TableNameTitle}} data", err)
		return
	}
	ctx.JSON(http.StatusOK, data)
}

func Update{{.TableNameTitle}}(w http.ResponseWriter, req *http.Request, ctx *flow.Context, store *datastore.Datastore) {
	siteID := ctx.SiteID()
	{{.TableNameCamel}}Helper := models.{{.TableNameTitle}}Helper()
	{{.TableNameCamel}}, err := {{.TableNameCamel}}Helper.FromRequest(siteID, ctx.Req)
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Failed to load {{.TableNameTitle}} record for update", err)
		return
	}

	// save and validate
	err = {{.TableNameCamel}}Helper.Save(siteID, {{.TableNameCamel}})
	// other type of error
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Failed to save updated {{.TableNameTitle}} record", err)
		return
	}

	ctx.JSON(http.StatusOK, {{.TableNameCamel}})
}

func Delete{{.TableNameTitle}}(w http.ResponseWriter, req *http.Request, ctx *flow.Context, store *datastore.Datastore) {
	siteID := ctx.SiteID()
	{{.TableNameCamel}}Helper := models.{{.TableNameTitle}}Helper()
	//get the {{.TableNameCamel}}ID from the request
	{{.TableNameCamel}}ID := ctx.URLIntParamWithDefault("{{.TableNameCamel}}ID", -1)
	if {{.TableNameCamel}}ID == -1 {
		ctx.JSON(http.StatusInternalServerError, "Invalid {{.TableNameTitle}}ID for remove")
		return
	}

	isDeleted, err := {{.TableNameCamel}}Helper.Delete(siteID, {{.TableNameCamel}}ID)
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError,"Failed to remove the {{.TableNameTitle}} record", err)
		return
	}
	ctx.JSON(http.StatusOK, isDeleted)
}

{{ if .HasSort }}
func Sort{{.TableNameTitle}}(w http.ResponseWriter, req *http.Request, ctx *flow.Context, store *datastore.Datastore) {
	siteID := ctx.SiteID()
	var sort models.{{.TableNamePluralTitle}}
	decoder := json.NewDecoder(ctx.Req.Body)
	err := decoder.Decode(&sort)
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "", err)
		return
	}

	err = models.{{.TableNameTitle}}Helper().SaveMany(siteID, sort)
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Failed to update sort position", err)
		return
	}

	ctx.JSON(http.StatusOK, sort)
}
{{end}}

	r.GET("/:api/v1/{{.TableNameLower}}/new", actions.New{{.TableNameTitle}}, security.Disallow)
	r.PST("/:api/v1/{{.TableNameLower}}/create", actions.Create{{.TableNameTitle}}, security.Disallow)
	r.GET("/:api/v1/{{.TableNameLower}}/retrieve", actions.Retrieve{{.TableNamePluralTitle}}, security.Disallow)
	r.GET("/:api/v1/{{.TableNameLower}}/retrieve/:{{.TableNameCamel}}ID", actions.Retrieve{{.TableNameTitle}}, security.Disallow)
	r.GET("/:api/v1/{{.TableNameLower}}/paged/:sort/:direction/limit/:limit/pagenum/:pagenum", actions.Paged{{.TableNamePluralTitle}}, security.Disallow)
	r.PUT("/:api/v1/{{.TableNameLower}}/update/:{{.TableNameCamel}}ID", actions.Update{{.TableNameTitle}}, security.Disallow)
	r.DEL("/:api/v1/{{.TableNameLower}}/delete/:{{.TableNameCamel}}ID", actions.Delete{{.TableNameTitle}}, security.Disallow)
	{{ if .HasSort }}r.PUT("/:api/v1/{{.TableNameLower}}/sort", actions.Sort{{.TableNameTitle}}, security.Disallow){{end}}
	
