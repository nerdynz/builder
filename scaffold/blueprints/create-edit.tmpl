<template>
  <div v-if="record">
    <div class="columns is-multiline">{{ range $i, $col := .Columns}}{{ if not (eq $col.ControlType "") }}
      <div class="column is-12">
        {{ if eq $col.ControlType "text" }}<control label="{{$col.Label}}" name="{{$col.Name}}" type="text" v-model="record.{{$col.Name}}" x-validate="'required'"/>{{ end }}{{ if eq $col.ControlType "textarea" }}<control label="{{$col.Label}}" name="{{$col.Name}}" type="textarea" v-model="record.{{$col.Name}}" x-validate="'required'"/>{{ end }}{{ if eq $col.ControlType "datetime" }}<control label="{{$col.Label}}" name="{{$col.Name}}" type="datetime" v-model="record.{{$col.Name}}" x-validate="'required'"/>{{ end }}{{ if eq $col.ControlType "number" }}<control label="{{$col.Label}}" name="{{$col.Name}}" type="number" v-model="record.{{$col.Name}}" x-validate="'required'"/>{{ end }}{{ if eq $col.ControlType "richtext" }}<field for="{{$col.Name}}" label="{{$col.Label}}">
          <rich-text name="{{$col.Name}}" v-model="record.{{$col.Name}}"></rich-text>
        </field>{{ end }}{{ if eq $col.ControlType "image" }}<field for="{{$col.Name}}" label="{{$col.Label}}">
          <image-upload name="{{$col.Name}}" v-model="record.{{$col.Name}}"></image-upload>
        </field>{{ end }}
      </div>{{ end }}{{end}}
    </div>
  </div>
</template>

{{.LTStr}}script{{.GTStr}}
import {mapGetters, mapActions} from 'vuex'

export default {
  components: {
  },
  inject: {
    $validator: '$validator'
  },
  computed: {
    isNewRecord () {
      if (this.routeID {{.LTStr}}= 0) {
        return true
      }
      return false
    },
    routeID () {
      return this.$route.params.ID ? parseInt(this.$route.params.ID) : 0
    },
    buttons () {
      let buttons = [
        {text: 'Save', alignment: 'left', kind: 'success', click: this.save, isDisabled: this.$validator.errors.any()},
        {text: 'Save & Return', alignment: 'left', kind: 'success', click: () => { this.save(true) }, isDisabled: this.$validator.errors.any()},
        {text: 'Back', alignment: 'left', kind: '', click: this.back}
      ]
      if (this.isNewRecord) {

      } else {
        // cant delete a new record
        buttons.push({text: 'Delete', alignment: 'right', kind: 'danger', click: this.remove})
      }
      return buttons
    },
    ...mapGetters({
      user: 'app/user'
    })
  },
  methods: {
    ...mapActions({
      setButtons: 'app/setButtons'
    }),

    loadRecord () {
      let loader = this.$loading.open()
      if (this.isNewRecord) {
        this.record = this.$service.new('{{.TableNameCamel}}')
        loader.close()
      } else {
        this.$service.retrieve('{{.TableNameCamel}}', this.routeID).then((newRecord) => {
          this.record = newRecord
          loader.close()
        })
      }
    },

    save (goBack) {
      var promise = new Promise((resolve, reject) => {
        this.$validator.validateAll().then((valid) => {
          if (valid) {
            this.$service.save('{{.TableNameCamel}}', this.record).then((newRecord) => {
              this.record = newRecord
              this.$snackbar.open({position: 'is-top', message: `{{.TableNameSpaces}} saved successfully`, type: 'is-success'})
              if (this.routeID === 0) {
                this.$router.replace({name: '{{.TableNamePlural}}-ID-{{.TableNameCamel}}Edit', params: { 'ID': newRecord['{{.TableNameTitle}}ID'] }})
              }
              resolve(newRecord)
            })
          } else {
            this.$snackbar.open({position: 'is-top', title: 'Failed to save!', message: 'Please double check the fields highlighted.', type: 'is-danger'})
          }
        })
      })
      return promise
    },

    back (ev) {
      this.$router.go(-1)
    },

    remove () {
      this.$service.remove('{{.TableNameCamel}}', this.record).then(() => {
        this.$toast.open({message: `{{.TableNameSpaces}} removed`, type: 'is-danger'})
        this.back()
      })
    }
  },
  watch: {
    'errors.items' () {
      this.setButtons(this.buttons)
    }
  },
  data () {
    return {
      record: null
    }
  },

  beforeCreate () {
  },
  created () {
    this.loadRecord()
    this.setButtons(this.buttons)
  },
  beforeMount () {
  },
  mounted () {
  },
  beforeUpdate () {
  },
  updated () {
  },
  beforeDestroy () {
  },
  destroyed () {
  }
}
{{.LTStr}}/script{{.GTStr}}
