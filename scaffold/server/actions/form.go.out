package actions

import (
	"encoding/json"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/nerdynz/builder/scaffold/server/models"

	"github.com/matcornic/hermes"
	flow "github.com/nerdynz/flow"
	uuid "github.com/satori/go.uuid"
	"github.com/sirupsen/logrus"
	mailgun "gopkg.in/mailgun/mailgun-go.v1"
)

func FormCapture(ctx *flow.Context) {
	formName := ctx.URLParam("name")
	formID := ctx.URLIntParamWithDefault("formid", -1)

	// working with json
	bytes, err := ioutil.ReadAll(ctx.Req.Body)
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Couldn't decode", err)
		return
	}

	if formID != -1 {
		form, err := models.FormHelper().LoadFullFormByID(formID)
		if err != nil {
			ctx.ErrorJSON(http.StatusInternalServerError, "Couldn't find the forms detail", err)
			return
		}

		formVals := map[string]string{}
		json.Unmarshal(bytes, &formVals)

		logrus.Info(formVals)
		entries := make([]hermes.Entry, 0)
		for _, field := range form.FormFields {
			entry := hermes.Entry{}
			entry.Key = field.Name
			entry.Value = formVals[field.FieldName]
			entries = append(entries, entry)
		}

		email := hermes.Email{
			Body: hermes.Body{
				Title: "A new " + form.Name + " entry has been made.",
				Intros: []string{
					"The details are as follows:",
				},
				// needs CMS Link
				Dictionary: entries,
				Outros:     []string{},
				Signature:  "Thanks",
			},
		}
		h := hermes.Hermes{
			Product: hermes.Product{
				Name:      "DT Fitness Website",
				Copyright: "DT Fitness",
			},
		}
		html, err := h.GenerateHTML(email)
		if err != nil {
			ctx.ErrorJSON(http.StatusInternalServerError, "Couldn't create a html email", err)
			return
		}
		plainText, err := h.GeneratePlainText(email)
		if err != nil {
			ctx.ErrorJSON(http.StatusInternalServerError, "Couldn't create a plain text email", err)
			return
		}

		mg := mailgun.NewMailgun(ctx.Settings.Get("MG_DOMAIN"), ctx.Settings.Get("MG_API_KEY"), ctx.Settings.Get("MG_PUBLIC_API_KEY"))
		m := mailgun.NewMessage("admin@dtfitness.co.nz", "DT Fitness - "+email.Body.Title, plainText, "josh@nerdy.co.nz")
		m.SetHtml(html)
		mg.Send(m)
	}

	// send an email

	_, err = ctx.DB.InsertInto("form_capture").
		Columns("name", "form_id", "capture", "date_created", "date_modified", "uuid").
		Values(formName, formID, string(bytes), time.Now(), time.Now(), uuid.Must(uuid.NewV4())).
		Exec()

	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Couldn't save the form", err)
		return
	}

	ctx.JSON(http.StatusOK, "")
}
